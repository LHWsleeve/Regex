# 正则指引
---
## 第一章 字符组（在同一个位置可能出现的各种字符）
  - 1.1 普通字符组（[]）：
正则表达式的范围表示法：用[0-9]表示[0123456789]，  本质是ascill码的码值（-范围表示法中可以同时
，<font color=#00ffff>并列多个范围[0-9a-zA-Z]</font>


- 1.2  元字符和转义：
元字符：‘-’表示范围而不是字符本身
除非使用转义字符  ‘  \’　　　　  (^[0\\-9]$)
[]是成对出现的，否则，最近匹配法或者用专一字符处理多余的 []

　　
- 1.3 排除型字符组（排除型字符组必须匹配一个字符）：
在方括号之前紧跟一个脱字符^,[^0-9]表示除了匹配０-９范围之外的数（非数值字符）

- 1.4 字符组简记法：
\d = [0-9]　\w = [0-9a-zA-Z<font color=#00ffff>_</font>] 　\s = [\t\r\n\v\f]（第一个字符是空格）
 *同理有\D,\W,\S,是对应的排除型字符组。[\s\S]可以表示匹配任意字符*

- 1.5 POSIX字符组：
为unix/linux设计的字符组。（暂时不管）


## 第二章 量词

 - 2.1
 \d, 可以匹配单个数字，当纯粹的数字匹配的时候可以使用量词，\d{6}
 量还可以表示不确定的长度\d{m,n}（n前面不能有空格)
 量词简记法:

 常用|等价
 -|-
 *|{0,}
 +|{1,0}
 ?|{0,1}
- 2.2
数据提取:
```
print re.search(r"\d{6}", "ac123456cd").group(0)
输出：123456
```
- 2.3 点号（.）
点号可以匹配任意字符（除了换行符\n）,可以使用[|s\S]来自制涵盖所有字符。
点号滥用会出现问题。（<font color=#00ffff>由于正则匹配的匹配优先量词规则/贪婪量词</font>，适合解析路径）
```
print re.search(r"\".*\"", "\"quote " and another\"")
输出："quote " and another\"
多一个双引号
```
- 2.3 忽略优先量词匹配
如果不确定要不要匹配，先不匹配，尝试表达式之后的元素，如果尝试失败，在回溯。(适合提取头尾固定，中间内容不固定并且有换行符的)

常用|等价|忽略优先量词
-|-|-
*|{0,}|*?
+|{1,0}|+?
?|{0,1}|??
 - 2.4 转义

 常用|忽略优先量词|转义形式
-|-|-
*|*?|\\*\\?
+|+?|\\+\\?
?|??|\\?\\?
{n}|null|\\{n}
{m,n}|null|\\{m,n}
{m,}|null|\\{m,}
.|null|\\.
